@page "/calendar"

@if (displayModal)
{
 <div id="divModal">
     <div class="container">
         <div class="panel panel-default">
             <div class="panel-heading modalHeading">Set Note</div>
             <div class="panel-body">
                 <div class="row">
                     <div class="col-md-4">
                         <label>From Date: </label>
                     </div>
                     <div class="col-md-8">
                         <input type ="date" style="width:100%;"/>
                     </div>
                 </div>
             </div>
             <div class="row">
                 <div class="col-md-4">
                     <label>To Date: </label>
                 </div>
                 <div class="col-md-8">
                     <input type="date" style="width:100%" />
                 </div>
             </div>
             <div class="col-md-4">
                 <label>Note: </label>
             </div>
             <div class="col-md-8">
                 <input type="text" placeholder="Type here..."/>
             </div>
         </div>
         <div class="row"style="margin-bottom:10px;">
             <div class="col-md-6">
             </div>
             <div class="col-md-6" style="text-align:right;">
                 <button class="btn btn-success" style="float:left;margin-right:5px;">Save</button>
                 <button class="btn btn-danger" @onclick="CloseModal" style="float:left;">Close</button>
             </div>
         </div>
     </div>

 </div>
}

<select @onchange="LoadCalendar">
    @foreach (string monthName in monthNames)
    {
        <option>@monthName</option>
    }
</select>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            @for (var dayIndex = 0; dayIndex < days.Count(); dayIndex++)
            {
                <th>
                    @days[dayIndex]
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @for (var weekIndex=0;weekIndex<weeks.Count(); weekIndex++ )
        {
            <tr>
                @for(var dayIndex = 0; dayIndex < weeks[weekIndex].Dates.Count(); dayIndex++)
                {
                    var wIndex = weekIndex;
                    var dIndex = dayIndex;

                <td @ondblclick="@(()=>OpenModal(wIndex, dIndex))">
                    @weeks[weekIndex].Dates[dayIndex].DateValue
                    <br /><br />
                    <label style="color:#c00;font-weight:bold">@weeks[weekIndex].Dates[dayIndex].Note</label>

                    <br /><br />
                    Cell Number: [@weekIndex, @dayIndex]
                </td>

                }
            </tr>
        }
    </tbody>
</table>


@code {
    bool displayModal = false;
    List<string> monthNames = new List<string>();
    List<string> days = new List<string>();
    List<WeekClass> weeks = new List<WeekClass>();
    DateTime startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    DateTime endDate = (new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).AddMonths(1).AddDays(-1);

    protected override void OnInitialized()
    {
        base.OnInitialized();


        monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames.ToList();
        GenerateCalendarHead();
        GenerateCalendarBody();
    }
    private void LoadCalendar(ChangeEventArgs e)
    {
        var month = e.Value.ToString();
        int monthIndex = DateTime.ParseExact(month, "MMMM", System.Globalization.CultureInfo.CurrentCulture).Month;
        startDate = new DateTime(DateTime.Now.Year, monthIndex, 1);
        endDate = (new DateTime(DateTime.Now.Year, monthIndex, 1)).AddMonths(1).AddDays(1);
        GenerateCalendarHead();
        GenerateCalendarBody();
    }
    private void GenerateCalendarHead()
    {
        var day1 = new List<string>();
        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            day1.Add(dt.ToString("dddd"));
        }
        days = day1.Distinct().ToList();

    }
    private void GenerateCalendarBody()
    {
        weeks = new List<WeekClass>();
        int flag = 0;
        WeekClass week = new WeekClass();
        List<DayEvent> dates = new List<DayEvent>();
        var totalDays = (int)(endDate - startDate).TotalDays;
        int countdays = 0;
        for (var dt = startDate; dt <=endDate; dt = dt.AddDays(1))
        {
            flag++;
            dates.Add(new DayEvent()
            {
                DateValue = dt.ToString("dd-MMM-yyyy"),
                DayName = dt.ToString("dddd")
            });
            if (flag==7)
            {
                week = new WeekClass();
                week.Dates = dates;
                weeks.Add(week);
                dates = new List<DayEvent>();
                flag = 0;
            }
            if (countdays==totalDays)
            {
                week = new WeekClass();
                week.Dates = dates;
                weeks.Add(week);
                break;
            }
            countdays++;
        }

    }
    private void CloseModal()
    {
        displayModal = false;
    }
    private void OpenModal(int wIndex, int dIndex)
    {
        displayModal = true;
    }
}
